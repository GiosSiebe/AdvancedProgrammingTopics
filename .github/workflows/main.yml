name: Build and Deliver Containers

on:
  push:
    branches:
      - main  # Adjust this based on your branch
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

jobs:
  # ActivityService build, test, and Docker deployment
  activityservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver activity-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ActivityService  # Correct directory name
        run: mvn clean package -DskipTests

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_NAME }}/activity-service:latest ./ActivityService

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_NAME }}/activity-service:latest

  # MoodService build, test, and Docker deployment
  moodservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver mood-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: MoodService  # Correct directory name
        run: mvn clean package -DskipTests

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_NAME }}/mood-service:latest ./MoodService

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_NAME }}/mood-service:latest

  # RecommendationService build, test, and Docker deployment
  recommendationservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver recommendation-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: RecommendationService  # Correct directory name
        run: mvn clean package -DskipTests

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_NAME }}/recommendation-service:latest ./RecommendationService

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_NAME }}/recommendation-service:latest

  # UserService build, test, and Docker deployment
  userservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver user-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: UserService  # Correct directory name
        run: mvn clean package -DskipTests

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_NAME }}/user-service:latest ./UserService

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_NAME }}/user-service:latest

  # ApiGateway build, test, and Docker deployment
  apigateway:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver api-gateway container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: api-gateway  # Correct directory name
        run: mvn clean package -DskipTests

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Docker Build
        run: docker build --build-arg GOOGLE_CLIENTID=${{ secrets.GOOGLE_CLIENTID }} --build-arg GOOGLE_CLIENTSECRET=${{ secrets.GOOGLE_CLIENTSECRET }} -t ${{ secrets.DOCKER_NAME }}/api-gateway:latest ./api-gateway

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_NAME }}/api-gateway:latest

  # Frontend build, test, and Docker deployment
  frontend:
    runs-on: ubuntu-latest
    name: Build, test, and deliver frontend container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Use a suitable Node.js version for your project

      - name: Install dependencies
        working-directory: frontend  # Adjust to the correct frontend directory path
        run: npm install

      - name: Set environment variables for build
        run: |
          echo "REACT_APP_GOOGLE_OAUTH_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_OAUTH_CLIENT_ID }}" >> $GITHUB_ENV
          echo "REACT_APP_GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.REACT_APP_GOOGLE_OAUTH_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_NAME }}/frontend:latest ./frontend

      - name: Push frontend container to Docker Hub
        run: docker push ${{ secrets.DOCKER_NAME }}/frontend:latest
